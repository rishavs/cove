TODOs:
    - Guards
        SERVERSIDE
        Client
            on click of elements
            on api call
    - Global messages which last one 1 ctx cycle
    - Need to standardize the func names


QUERIES:

    CREATE TABLE USERS(
        UNQID TEXT PRIMARY KEY,
        USERNAME TEXT NOT NULL UNIQUE,
        PASSWORD TEXT NOT NULL,
        IS_DELETED BOOL DEFAULT FALSE,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        DELETED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP        
    );

    CREATE TABLE POSTS(
        UNQID TEXT PRIMARY KEY,
        TITLE TEXT NOT NULL,
        LINK TEXT,
        THUMB TEXT,
        CONTENT TEXT,
        AUTHOR_ID TEXT NOT NULL,
        IS_DELETED BOOL DEFAULT FALSE,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        DELETED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE COMMENTS(
        UNQID TEXT PRIMARY KEY,
        LEVEL INT NOT NULL,
        POST_ID TEXT,
        PARENT_ID TEXT,
        children_ids TEXT,
        CONTENT TEXT,
        AUTHOR_ID TEXT NOT NULL,
        IS_DELETED BOOL DEFAULT FALSE,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        DELETED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    insert into comments (unqid, level, post_id, parent_id,  content, author_id) 
    values ('cid10', 0, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'none', 'This is a PARENT level comment', 'JRR Tolkien');

    insert into comments (unqid, level, post_id, parent_id,  content, author_id) 
    values ('cid11', 1, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid10',  'This is a CHILD level comment', 'Mark Twain');

    insert into comments (unqid, level, post_id, parent_id,  content, author_id) 
    values ('cid12', 2, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid11', 'This is a GRANDCHILD level comment', 'RL Stephenson');

    insert into comments (unqid, level, post_id, parent_id,  content, author_id) 
    values ('cid20', 0, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'none', 'This is 2nd PARENT level comment', 'Dante');

    CREATE TABLE BETTERCOMMENTS(
        UNQID TEXT PRIMARY KEY,
        LEVEL INT NOT NULL,
        POST_ID TEXT,
        PARENT_ID TEXT,
        children_ids TEXT [],
        CONTENT TEXT,
        AUTHOR_ID TEXT NOT NULL,
        IS_DELETED BOOL DEFAULT FALSE,
        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        DELETED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid100', 0, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'none', '{"cid110", "cid120" }', 'This is a PARENT level comment', 'JRR Tolkien');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid110', 1, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid100', '{"cid112"}', 'This is a CHILD level comment', 'Mark Twain');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid120', 1, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid100', '{}', 'This is a 2nd CHILD level comment', 'JK Rowling');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid112', 2, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'cid110', '{}', 'This is a GRANDCHILD level comment', 'RL Stephenson');

    insert into comments (unqid, level, post_id, parent_id,  children_ids, content, author_id) 
    values ('cid200', 0, 'c47b5af1-a43b-4488-86cd-a42645b66c10' , 'none', '{}', 'This is 2nd PARENT level comment', 'Dante');


    class Item
  property unqid : String
  property parent_id : String
  property level : Int32
  property post_id : String
  property content : String
  property author_id : String

  def initialize(@unqid, @parent_id, @level, @post_id, @content, @author_id)
  end
end

class TreeItem
  property unqid : String
  property parent_id : String
  property level : Int32
  property post_id : String
  property content : String
  property author_id : String
  property children = [] of TreeItem

  def self.from_item(it : Item)
    new(it.unqid, it.parent_id, it.level, it.post_id, it.content, it.author_id)
  end

  def initialize(@unqid, @parent_id, @level, @post_id, @content, @author_id)
  end
end

def list_to_tree(input : Array(Item)) : Array(TreeItem)
  tree = [] of TreeItem
  items_by_id = {} of String => TreeItem

  input.each do |item|
    items_by_id[item.unqid] = TreeItem.from_item item
  end

  input.each do |item|
    node = items_by_id[item.unqid]

    if node.parent_id == 'none'
      tree << node
    else
      parent_node = items_by_id[item.parent_id]
      parent_node.children << node
    end
  end

  tree
end

# Build input:
input = [] of Item
input << Item.new(
  unqid: 'cid10',
  level: 0,
  post_id: 'c47b5af1-a43b-4488-86cd-a42645b66c10',
  parent_id: 'none',
  content: 'This is a PARENT level comment',
  author_id: 'JRR Tolkien',
)
input << Item.new(
  unqid: 'cid11',
  level: 1,
  post_id: 'c47b5af1-a43b-4488-86cd-a42645b66c10',
  parent_id: 'cid10',
  content: 'This is a CHILD level comment',
  author_id: 'Mark Twain'
)
input << Item.new(
  unqid: 'cid12',
  level: 2,
  post_id: 'c47b5af1-a43b-4488-86cd-a42645b66c10',
  parent_id: 'cid11',
  content: 'This is a GRANDCHILD level comment',
  author_id: 'RL Stephenson'
)
input << Item.new(
  unqid: 'cid20',
  level: 0,
  post_id: 'c47b5af1-a43b-4488-86cd-a42645b66c10',
  parent_id: 'none',
  content: 'This is 2nd PARENT level comment',
  author_id: 'Dante'
)

# Make a tree:
pp list_to_tree(input)